diff -Naur linux-2.6.10/arch/ppc/boot/simple/misc-prep.c linux-2.6.10-patched/arch/ppc/boot/simple/misc-prep.c
--- linux-2.6.10/arch/ppc/boot/simple/misc-prep.c	2005-03-17 20:53:17.000000000 +0100
+++ linux-2.6.10-patched/arch/ppc/boot/simple/misc-prep.c	2005-03-17 20:39:18.000000000 +0100
@@ -154,7 +154,9 @@
 
 	/* Now go and clear out the BATs and ensure that our MSR is
 	 * correct .*/
+#ifdef CONFIG_6xx
 	disable_6xx_mmu();
+#endif
 
 	/* Make r3 be a pointer to the residual data. */
 	return (unsigned long)hold_residual;
diff -Naur linux-2.6.10/drivers/net/ppp_async.c linux-2.6.10-patched/drivers/net/ppp_async.c
--- linux-2.6.10/drivers/net/ppp_async.c	2005-03-17 20:53:17.000000000 +0100
+++ linux-2.6.10-patched/drivers/net/ppp_async.c	2005-03-17 20:40:47.000000000 +0100
@@ -1000,7 +1000,7 @@
 	data += 4;
 	dlen -= 4;
 	/* data[0] is code, data[1] is length */
-	while (dlen >= 2 && dlen >= data[1]) {
+	while (dlen >= 2 && dlen >= data[1] && data[1] >= 2) {
 		switch (data[0]) {
 		case LCP_MRU:
 			val = (data[2] << 8) + data[3];
diff -Naur linux-2.6.10/fs/eventpoll.c linux-2.6.10-patched/fs/eventpoll.c
--- linux-2.6.10/fs/eventpoll.c	2005-03-17 20:53:17.000000000 +0100
+++ linux-2.6.10-patched/fs/eventpoll.c	2005-03-17 20:40:37.000000000 +0100
@@ -619,6 +619,7 @@
 	return error;
 }
 
+#define MAX_EVENTS (INT_MAX / sizeof(struct epoll_event))
 
 /*
  * Implement the event wait interface for the eventpoll file. It is the kernel
@@ -635,7 +636,7 @@
 		     current, epfd, events, maxevents, timeout));
 
 	/* The maximum number of event must be greater than zero */
-	if (maxevents <= 0)
+	if (maxevents <= 0 || maxevents > MAX_EVENTS)
 		return -EINVAL;
 
 	/* Verify that the area passed by the user is writeable */
diff -Nru a/fs/exec.c b/fs/exec.c
--- a/fs/exec.c	2005-03-15 16:09:59 -08:00
+++ b/fs/exec.c	2005-03-15 16:09:59 -08:00
@@ -814,7 +814,7 @@
 {
 	/* buf must be at least sizeof(tsk->comm) in size */
 	task_lock(tsk);
-	memcpy(buf, tsk->comm, sizeof(tsk->comm));
+	strncpy(buf, tsk->comm, sizeof(tsk->comm));
 	task_unlock(tsk);
 }
 
