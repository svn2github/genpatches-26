From: john stultz <johnstul@us.ibm.com>
Date: Wed, 28 Sep 2005 04:45:36 +0000 (-0700)
Subject:     [PATCH] x86-64: Fix bad assumption that dualcore cpus have synced TSCs
X-Git-Tag: v2.6.14-rc3
X-Git-Url: http://www.kernel.org/git/gitweb.cgi?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=6c132b5fe6579ed4b4892c02fe6c05f7e3afc579

  [PATCH] x86-64: Fix bad assumption that dualcore cpus have synced TSCs
  
  This should resolve the issue seen in bugme bug #5105, where it is assumed
  that dualcore x86_64 systems have synced TSCs.  This is not the case, and
  alternate timesources should be used instead.
  
  For more details, see:
  http://bugzilla.kernel.org/show_bug.cgi?id=5105
  
  Andi's earlier concerns that the TSCs should be synced on dualcore systems
  have been resolved by confirmation from AMD folks that they can be
  unsynced.
  
  Acked-by: Andi Kleen <ak@suse.de>
  Signed-off-by: Andrew Morton <akpm@osdl.org>
  Signed-off-by: Linus Torvalds <torvalds@osdl.org>
---

--- a/arch/x86_64/kernel/time.c
+++ b/arch/x86_64/kernel/time.c
@@ -959,9 +959,6 @@ static __init int unsynchronized_tsc(voi
  	   are handled in the OEM check above. */
  	if (boot_cpu_data.x86_vendor == X86_VENDOR_INTEL)
  		return 0;
- 	/* All in a single socket - should be synchronized */
- 	if (cpus_weight(cpu_core_map[0]) == num_online_cpus())
- 		return 0;
 #endif
  	/* Assume multi socket systems are not synchronized */
  	return num_online_cpus() > 1;
