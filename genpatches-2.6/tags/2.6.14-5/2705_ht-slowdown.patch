From: Venkatesh Pallipadi <venkatesh.pallipadi@intel.com>
Date: Thu, 15 Sep 2005 16:20:00 +0000 (-0400)
Subject:     [ACPI] Add support for FADT P_LVL2_UP flag
X-Git-Tag: v2.6.15-rc4
X-Git-Url: http://www.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commitdiff;h=4c0335526c95d90a1d958e0059f40a5745fc7c5d

  [ACPI] Add support for FADT P_LVL2_UP flag
  which tells us if C2 is valid for UP-only, or SMP.
  
  As there is no separate bit for C3,  use P_LVL2_UP
  bit to cover both C2 and C3.
  
  http://bugzilla.kernel.org/show_bug.cgi?id=5165
  
  Signed-off-by: Venkatesh Pallipadi<venkatesh.pallipadi@intel.com>
  Signed-off-by: Len Brown <len.brown@intel.com>
  (cherry picked from 28b86b368af3944eb383078fc5797caf2dc8ce44 commit)
---

--- a/drivers/acpi/processor_idle.c
+++ b/drivers/acpi/processor_idle.c
@@ -280,6 +280,16 @@ static void acpi_processor_idle(void)
 
 	cx->usage++;
 
+#ifdef CONFIG_HOTPLUG_CPU
+	/*
+	 * Check for P_LVL2_UP flag before entering C2 and above on
+	 * an SMP system. We do it here instead of doing it at _CST/P_LVL
+	 * detection phase, to work cleanly with logical CPU hotplug.
+	 */
+	if ((cx->type != ACPI_STATE_C1) && (num_online_cpus() > 1) && 
+	    !pr->flags.has_cst && acpi_fadt.plvl2_up)
+		cx->type = ACPI_STATE_C1;
+#endif
 	/*
 	 * Sleep:
 	 * ------
@@ -534,6 +544,15 @@ static int acpi_processor_get_power_info
 	pr->power.states[ACPI_STATE_C0].valid = 1;
 	pr->power.states[ACPI_STATE_C1].valid = 1;
 
+#ifndef CONFIG_HOTPLUG_CPU
+	/*
+	 * Check for P_LVL2_UP flag before entering C2 and above on
+	 * an SMP system. 
+	 */
+	if ((num_online_cpus() > 1) && acpi_fadt.plvl2_up)
+		return_VALUE(-ENODEV);
+#endif
+
 	/* determine C2 and C3 address from pblk */
 	pr->power.states[ACPI_STATE_C2].address = pr->pblk + 4;
 	pr->power.states[ACPI_STATE_C3].address = pr->pblk + 5;
