This change was introduced between the 2.6.14.6-200601211647 and
2.6.14.7-200602072041 snapshots. According to spender, it fixes a problem that
would occur during policy recreation. WARNING! This introduces a dependency
on gradm-2.1.8-200602071945 or higher over in userland.

diff -urp linux-2.6.14-grsec-2.1.8-2.6.14.6-200601211647/grsecurity/gracl.c linux-2.6.14-grsec-2.1.8-2.6.14.7-200602072041/grsecurity/gracl.c
--- linux-2.6.14-grsec-2.1.8-2.6.14.6-200601211647/grsecurity/gracl.c	2006-02-07 22:24:38.000000000 -0500
+++ linux-2.6.14-grsec-2.1.8-2.6.14.7-200602072041/grsecurity/gracl.c	2006-02-07 22:24:50.000000000 -0500
@@ -28,7 +28,7 @@
 
 static struct acl_role_db acl_role_set;
 static struct name_db name_set;
-static struct name_db inodev_set;
+static struct inodev_db inodev_set;
 
 /* for keeping track of userspace pointers used for subjects, so we
    can share references in the kernel as well
@@ -481,32 +481,35 @@ lookup_name_entry(const char *name)
 static struct name_entry *
 lookup_inodev_entry(const ino_t ino, const dev_t dev)
 {
-	unsigned int index = fhash(ino, dev, inodev_set.n_size);
-	struct name_entry *match;
+	unsigned int index = fhash(ino, dev, inodev_set.i_size);
+	struct inodev_entry *match;
 
-	match = inodev_set.n_hash[index];
+	match = inodev_set.i_hash[index];
 
-	while (match && (match->inode != ino || match->device != dev))
+	while (match && (match->nentry->inode != ino || match->nentry->device != dev))
 		match = match->next;
 
-	return match;
+	if (match != NULL)
+		return match->nentry;
+	else
+		return NULL;
 }
 
 static void
-insert_inodev_entry(struct name_entry *nentry)
+insert_inodev_entry(struct inodev_entry *entry)
 {
-	unsigned int index = fhash(nentry->inode, nentry->device,
-				    inodev_set.n_size);
-	struct name_entry **curr;
+	unsigned int index = fhash(entry->nentry->inode, entry->nentry->device,
+				    inodev_set.i_size);
+	struct inodev_entry **curr;
 
-	nentry->prev = NULL;
+	entry->prev = NULL;
 
-	curr = &inodev_set.n_hash[index];
+	curr = &inodev_set.i_hash[index];
 	if (*curr != NULL)
-		(*curr)->prev = nentry;
+		(*curr)->prev = entry;
 	
-	nentry->next = *curr;
-	*curr = nentry;
+	entry->next = *curr;
+	*curr = entry;
 
 	return;
 }
@@ -546,6 +549,7 @@ static int
 insert_name_entry(char *name, const ino_t inode, const dev_t device)
 {
 	struct name_entry **curr, *nentry;
+	struct inodev_entry *ientry;
 	unsigned int len = strlen(name);
 	unsigned int key = full_name_hash(name, len);
 	unsigned int index = key % name_set.n_size;
@@ -561,6 +565,10 @@ insert_name_entry(char *name, const ino_
 	nentry = acl_alloc(sizeof (struct name_entry));
 	if (nentry == NULL)
 		return 0;
+	ientry = acl_alloc(sizeof (struct inodev_entry));
+	if (ientry == NULL)
+		return 0;
+	ientry->nentry = nentry;
 
 	nentry->key = key;
 	nentry->name = name;
@@ -576,7 +584,7 @@ insert_name_entry(char *name, const ino_
 	*curr = nentry;
 
 	/* insert us into the table searchable by inode/dev */
-	insert_inodev_entry(nentry);
+	insert_inodev_entry(ientry);
 
 	return 1;
 }
@@ -661,10 +669,10 @@ init_variables(const struct gr_arg *arg)
 	subj_map_set.s_size = arg->role_db.num_subjects;
 	acl_role_set.r_size = arg->role_db.num_roles + arg->role_db.num_domain_children;
 	name_set.n_size = arg->role_db.num_objects;
-	inodev_set.n_size = arg->role_db.num_objects;
+	inodev_set.i_size = arg->role_db.num_objects;
 
 	if (!subj_map_set.s_size || !acl_role_set.r_size ||
-	    !name_set.n_size || !inodev_set.n_size)
+	    !name_set.n_size || !inodev_set.i_size)
 		return 1;
 
 	if (!gr_init_uidset())
@@ -689,11 +697,11 @@ init_variables(const struct gr_arg *arg)
 	acl_role_set.r_hash =
 	    (struct acl_role_label **) create_table(&acl_role_set.r_size, sizeof(void *));
 	name_set.n_hash = (struct name_entry **) create_table(&name_set.n_size, sizeof(void *));
-	inodev_set.n_hash =
-	    (struct name_entry **) create_table(&inodev_set.n_size, sizeof(void *));
+	inodev_set.i_hash =
+	    (struct inodev_entry **) create_table(&inodev_set.i_size, sizeof(void *));
 
 	if (!subj_map_set.s_hash || !acl_role_set.r_hash ||
-	    !name_set.n_hash || !inodev_set.n_hash)
+	    !name_set.n_hash || !inodev_set.i_hash)
 		return 1;
 
 	memset(subj_map_set.s_hash, 0,
@@ -702,8 +710,8 @@ init_variables(const struct gr_arg *arg)
 	       sizeof (struct acl_role_label *) * acl_role_set.r_size);
 	memset(name_set.n_hash, 0,
 	       sizeof (struct name_entry *) * name_set.n_size);
-	memset(inodev_set.n_hash, 0,
-	       sizeof (struct name_entry *) * inodev_set.n_size);
+	memset(inodev_set.i_hash, 0,
+	       sizeof (struct inodev_entry *) * inodev_set.i_size);
 
 	return 0;
 }
@@ -806,18 +814,18 @@ free_variables(void)
 			vfree(name_set.n_hash);
 	}
 
-	if (inodev_set.n_hash) {
-		if ((inodev_set.n_size * sizeof (struct name_entry *)) <=
+	if (inodev_set.i_hash) {
+		if ((inodev_set.i_size * sizeof (struct inodev_entry *)) <=
 		    PAGE_SIZE)
-			kfree(inodev_set.n_hash);
+			kfree(inodev_set.i_hash);
 		else
-			vfree(inodev_set.n_hash);
+			vfree(inodev_set.i_hash);
 	}
 
 	gr_free_uidset();
 
 	memset(&name_set, 0, sizeof (struct name_db));
-	memset(&inodev_set, 0, sizeof (struct name_db));
+	memset(&inodev_set, 0, sizeof (struct inodev_db));
 	memset(&acl_role_set, 0, sizeof (struct acl_role_db));
 	memset(&subj_map_set, 0, sizeof (struct acl_subj_map_db));
 
@@ -2384,19 +2392,19 @@ static void
 update_inodev_entry(const ino_t oldinode, const dev_t olddevice,
 		    const ino_t newinode, const dev_t newdevice)
 {
-	unsigned int index = fhash(oldinode, olddevice, inodev_set.n_size);
-	struct name_entry *match;
+	unsigned int index = fhash(oldinode, olddevice, inodev_set.i_size);
+	struct inodev_entry *match;
 
-	match = inodev_set.n_hash[index];
+	match = inodev_set.i_hash[index];
 
-	while (match && (match->inode != oldinode ||
-	       match->device != olddevice))
+	while (match && (match->nentry->inode != oldinode ||
+	       match->nentry->device != olddevice))
 		match = match->next;
 
-	if (match && (match->inode == oldinode)
-	    && (match->device == olddevice)) {
+	if (match && (match->nentry->inode == oldinode)
+	    && (match->nentry->device == olddevice)) {
 		if (match->prev == NULL) {
-			inodev_set.n_hash[index] = match->next;
+			inodev_set.i_hash[index] = match->next;
 			if (match->next != NULL)
 				match->next->prev = NULL;
 		} else {
@@ -2406,8 +2414,8 @@ update_inodev_entry(const ino_t oldinode
 		}
 		match->prev = NULL;
 		match->next = NULL;
-		match->inode = newinode;
-		match->device = newdevice;
+		match->nentry->inode = newinode;
+		match->nentry->device = newdevice;
 
 		insert_inodev_entry(match);
 	}
diff -urp linux-2.6.14-grsec-2.1.8-2.6.14.6-200601211647/include/linux/gracl.h linux-2.6.14-grsec-2.1.8-2.6.14.7-200602072041/include/linux/gracl.h
--- linux-2.6.14-grsec-2.1.8-2.6.14.6-200601211647/include/linux/gracl.h	2006-02-07 22:24:38.000000000 -0500
+++ linux-2.6.14-grsec-2.1.8-2.6.14.7-200602072041/include/linux/gracl.h	2006-02-07 22:24:50.000000000 -0500
@@ -56,11 +56,22 @@ struct name_entry {
 	struct name_entry *next;
 };
 
+struct inodev_entry {
+	struct name_entry *nentry;
+	struct inodev_entry *prev;
+	struct inodev_entry *next;
+};
+
 struct acl_role_db {
 	struct acl_role_label **r_hash;
 	__u32 r_size;
 };
 
+struct inodev_db {
+	struct inodev_entry **i_hash;
+	__u32 i_size;
+};
+
 struct name_db {
 	struct name_entry **n_hash;
 	__u32 n_size;
