From: Gordon Malm <bugs-gentoo-org-02@bumpin.org>

Fix bug that allows audit and iscsi operations to be controlled
via netlink; it should be disallowed by grsec.

More info @ https://bugs.gentoo.org/show_bug.cgi?id=213254

This is grsecurity upstreams' version of the patch submitted
in the aforementioned bug.

Thanks to cilly <cilly@cilly.mine.nu> for bringing the patch to
our attention.  Thanks to Kerin Millar <kerframil@gmail.com> for
following up with the author of the original patch and reporting
the matter upstream.

This patch is present in upstream grsecurity patches as of
grsecurity-2.1.11-2.6.24.3-200803172136.patch.  This patch can
be dropped for any hardened-sources-2.6.24 based on 
grsecurity-2.1.11-2.6.24.3-200803172136.patch or later.

Acked-by: Kerin Millar <kerframil@gmail.com>

--- a/drivers/pci/proc.c
+++ b/drivers/pci/proc.c
@@ -469,7 +469,7 @@ static int __init pci_proc_init(void)
 #ifdef CONFIG_GRKERNSEC_PROC_ADD
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 	proc_bus_pci_dir = proc_mkdir_mode("pci", S_IRUSR | S_IXUSR, proc_bus);
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 	proc_bus_pci_dir = proc_mkdir_mode("pci", S_IRUSR | S_IXUSR | S_IRGRP | S_IXGRP, proc_bus);
 #endif
 #else
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -1102,7 +1102,7 @@ static int pid_getattr(struct vfsmount *
 		if ((inode->i_mode == (S_IFDIR|S_IRUGO|S_IXUGO)) ||
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IXUSR)) ||
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IRGRP|S_IXUSR|S_IXGRP)) ||
 #endif
 		    task_dumpable(task)) {
@@ -1144,7 +1144,7 @@ static int pid_revalidate(struct dentry 
 		if ((inode->i_mode == (S_IFDIR|S_IRUGO|S_IXUGO)) ||
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IXUSR)) ||
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 		    (inode->i_mode == (S_IFDIR|S_IRUSR|S_IRGRP|S_IXUSR|S_IXGRP)) ||
 #endif
 		    task_dumpable(task)) {
@@ -2265,7 +2265,7 @@ static struct dentry *proc_pid_instantia
 
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 	inode->i_mode = S_IFDIR|S_IRUSR|S_IXUSR;
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 	inode->i_gid = CONFIG_GRKERNSEC_PROC_GID;
 	inode->i_mode = S_IFDIR|S_IRUSR|S_IRGRP|S_IXUSR|S_IXGRP;
 #else
--- a/grsecurity/grsec_sock.c
+++ b/grsecurity/grsec_sock.c
@@ -16,6 +16,7 @@ extern struct sock *udp_v4_lookup(u32 sa
 EXPORT_SYMBOL(udp_v4_lookup);
 #endif
 
+__u32 gr_cap_rtnetlink(struct sock *sock);
 EXPORT_SYMBOL(gr_cap_rtnetlink);
 
 extern int gr_search_udp_recvmsg(const struct sock *sk, const struct sk_buff *skb);
@@ -247,11 +248,21 @@ gr_handle_sock_client(const struct socka
 }
 
 __u32
-gr_cap_rtnetlink(void)
+gr_cap_rtnetlink(struct sock *sock)
 {
 #ifdef CONFIG_GRKERNSEC
 	if (!gr_acl_is_enabled())
 		return current->cap_effective;
+	else if (sock->sk_protocol == NETLINK_ISCSI &&
+		 cap_raised(current->cap_effective, CAP_SYS_ADMIN) &&
+		 gr_task_is_capable(current, CAP_SYS_ADMIN))
+		return current->cap_effective;
+	else if (sock->sk_protocol == NETLINK_AUDIT &&
+		 cap_raised(current->cap_effective, CAP_AUDIT_WRITE) &&
+		 gr_task_is_capable(current, CAP_AUDIT_WRITE) &&
+		 cap_raised(current->cap_effective, CAP_AUDIT_CONTROL) &&
+		 gr_task_is_capable(current, CAP_AUDIT_CONTROL))
+		return current->cap_effective;
 	else if (cap_raised(current->cap_effective, CAP_NET_ADMIN) &&
 		 gr_task_is_capable(current, CAP_NET_ADMIN))
 		return current->cap_effective;
--- a/include/linux/grsecurity.h
+++ b/include/linux/grsecurity.h
@@ -167,7 +167,6 @@ __u32 gr_acl_handle_unix(const struct de
 void gr_acl_handle_exit(void);
 void gr_acl_handle_psacct(struct task_struct *task, const long code);
 int gr_acl_handle_procpidmem(const struct task_struct *task);
-__u32 gr_cap_rtnetlink(void);
 
 #ifdef CONFIG_SYSVIPC
 void gr_shm_exit(struct task_struct *task);
--- a/kernel/configs.c
+++ b/kernel/configs.c
@@ -82,7 +82,7 @@ static int __init ikconfig_init(void)
 #ifdef CONFIG_GRKERNSEC_PROC_ADD
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 	entry = create_proc_entry("config.gz", S_IFREG | S_IRUSR, &proc_root);
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 	entry = create_proc_entry("config.gz", S_IFREG | S_IRUSR | S_IRGRP, &proc_root);
 #endif
 #else
--- a/kernel/kallsyms.c
+++ b/kernel/kallsyms.c
@@ -496,7 +496,7 @@ static int __init kallsyms_init(void)
 #ifdef CONFIG_GRKERNSEC_PROC_ADD
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 	entry = create_proc_entry("kallsyms", S_IFREG | S_IRUSR, NULL);
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 	entry = create_proc_entry("kallsyms", S_IFREG | S_IRUSR | S_IRGRP, NULL);
 #endif
 #else
--- a/kernel/resource.c
+++ b/kernel/resource.c
@@ -136,7 +136,7 @@ static int __init ioresources_init(void)
 #ifdef CONFIG_GRKERNSEC_PROC_ADD
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 	entry = create_proc_entry("ioports", S_IRUSR, NULL);
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 	entry = create_proc_entry("ioports", S_IRUSR | S_IRGRP, NULL);
 #endif
 #else
@@ -148,7 +148,7 @@ static int __init ioresources_init(void)
 #ifdef CONFIG_GRKERNSEC_PROC_ADD
 #ifdef CONFIG_GRKERNSEC_PROC_USER
 	entry = create_proc_entry("iomem", S_IRUSR, NULL);
-#elif CONFIG_GRKERNSEC_PROC_USERGROUP
+#elif defined(CONFIG_GRKERNSEC_PROC_USERGROUP)
 	entry = create_proc_entry("iomem", S_IRUSR | S_IRGRP, NULL);
 #endif
 #else
--- a/security/commoncap.c
+++ b/security/commoncap.c
@@ -24,9 +24,11 @@
 #include <linux/hugetlb.h>
 #include <linux/grsecurity.h>
 
+extern __u32 gr_cap_rtnetlink(struct sock *sk);
+
 int cap_netlink_send(struct sock *sk, struct sk_buff *skb)
 {
-	NETLINK_CB(skb).eff_cap = gr_cap_rtnetlink();
+	NETLINK_CB(skb).eff_cap = gr_cap_rtnetlink(sk);
 	return 0;
 }
 
