At some point the execve() code was changed in terms of how it sets up 
the new task's address space, in particular, how the initial stack was 
initialized, allowing "unlimited" number of args/env/etc. This was done 
by making use of the already present and established mm struct of the 
new task and the normal VM logic that deals with automatic userland 
stack expansion. 

However, this broke assumptions elsewhere in the kernel where 
current->mm was used in accounting code and which happened to be NULL 
for kernel threads. In this case, acct_stack_growth() wasn't making use 
of the new security_vm_enough_memory_mm() function as needed. This is 
pertinent to PaX users because only PaX performs "sub-page" stack 
randomization, so it can cause the one page of the initial stack to run 
out and trigger a stack expansion. Unfortunately, it may be a kernel 
thread that does this. 

This patch closes bug 210022. For further information:

  http://bugs.gentoo.org/show_bug.cgi?id=210022 and 
  http://forums.grsecurity.net/viewtopic.php?f=3&t=1873

Thanks to cilly <cilly@cilly.mine.nu> for raising the matter and tracking down
the appropriate patch.

This patch is present in upstream grsecurity patches as of
pax-linux-2.6.24-test9.patch. This patch can be dropped for any
hardened-sources-2.6.24 based upon pax-linux-2.6.24-test9.patch or
later.

Acked-by: Kerin Millar <kerframil@gmail.com>

--- a/mm/mmap.c	2008-02-14 20:14:52.000000000 +0000
+++ b/mm/mmap.c	2008-02-14 20:40:19.000000000 +0000
@@ -1742,7 +1742,7 @@ static int acct_stack_growth(struct vm_a
 	 * Overcommit..  This must be the final test, as it will
 	 * update security statistics.
 	 */
-	if (security_vm_enough_memory(grow))
+	if (security_vm_enough_memory_mm(mm, grow))
 		return -ENOMEM;
 
 	/* Ok, everything looks good - let it rip */
