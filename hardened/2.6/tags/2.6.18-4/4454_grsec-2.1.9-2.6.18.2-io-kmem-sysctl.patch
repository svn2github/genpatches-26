This patch is broken, see http://bugs.gentoo.org/show_bug.cgi?id=157409

In the meantime: please do not use it until further notice, thanks

Alex <pappy@gentoo.org>

First initial import by Christian Heim <phreak@gentoo.org>

This patch reworks the logic behind GRKERNSEC_IO and GRKERNSEC_KMEM, making it less
intrusive and adding support for sysctl.

The original patch is based on the work of Peter S. Mazinger (ps dot m at gmx dot net)
and Nedd Ludd <solar@gentoo.org>.

Index: linux-2.6.18/arch/i386/kernel/ioport.c
===================================================================
--- linux-2.6.18.orig/arch/i386/kernel/ioport.c
+++ linux-2.6.18/arch/i386/kernel/ioport.c
@@ -17,6 +17,7 @@
 #include <linux/slab.h>
 #include <linux/thread_info.h>
 #include <linux/grsecurity.h>
+#include <linux/grinternal.h>
 
 /* Set EXTENT bits starting at BASE in BITMAP to value TURN_ON. */
 static void set_bitmap(unsigned long *bitmap, unsigned int base, unsigned int extent, int new_value)
@@ -65,18 +66,21 @@ asmlinkage long sys_ioperm(unsigned long
 
 	if ((from + num <= from) || (from + num > IO_BITMAP_BITS))
 		return -EINVAL;
-#ifdef CONFIG_GRKERNSEC_IO
+
 	if (turn_on) {
-		gr_handle_ioperm();
+#ifdef CONFIG_GRKERNSEC_IO
+		if (!grsec_lock || (grsec_lock && grsec_enable_secure_io)) {
 #else
-	if (turn_on && !capable(CAP_SYS_RAWIO))
+		if (grsec_enable_secure_io) {
 #endif
-		return -EPERM;
-#ifdef CONFIG_GRKERNSEC_IO
+			gr_handle_ioperm();
+			return -EPERM;
+		} else if (!capable(CAP_SYS_RAWIO)) {
+			return -EPERM;
+		}
 	}
-#endif
-	/*
-	 * If it's the first ioperm() call in this thread's lifetime, set the
+
+	 /* If it's the first ioperm() call in this thread's lifetime, set the
 	 * IO bitmap up. ioperm() is much less timing critical than clone(),
 	 * this is why we delay this operation until now:
 	 */
@@ -152,13 +156,17 @@ asmlinkage long sys_iopl(unsigned long u
 	/* Trying to gain more privileges? */
 	if (level > old) {
 #ifdef CONFIG_GRKERNSEC_IO
-		gr_handle_iopl();
-		return -EPERM;
+		if (!grsec_lock || (grsec_lock && grsec_enable_secure_io)) {
 #else
-		if (!capable(CAP_SYS_RAWIO))
-			return -EPERM;
+		if (grsec_enable_secure_io) {
 #endif
+			gr_handle_iopl();
+			return -EPERM;
+		} else if (!capable(CAP_SYS_RAWIO)) {
+			return -EPERM;
+		}
 	}
+
 	t->iopl = level << 12;
 	regs->eflags = (regs->eflags & ~X86_EFLAGS_IOPL) | t->iopl;
 	set_iopl_mask(t->iopl);
Index: linux-2.6.18/drivers/char/mem.c
===================================================================
--- linux-2.6.18.orig/drivers/char/mem.c
+++ linux-2.6.18/drivers/char/mem.c
@@ -27,6 +27,7 @@
 #include <linux/bootmem.h>
 #include <linux/pipe_fs_i.h>
 #include <linux/grsecurity.h>
+#include <linux/grinternal.h>
 
 #include <asm/uaccess.h>
 #include <asm/io.h>
@@ -179,9 +180,13 @@ static ssize_t write_mem(struct file * f
 		return -EFAULT;
 
 #ifdef CONFIG_GRKERNSEC_KMEM
-	gr_handle_mem_write();
-	return -EPERM;
+	if (!grsec_lock || (grsec_lock && grsec_enable_secure_kmem)) {
+#else
+	if (grsec_enable_secure_kmem) {
 #endif
+		gr_handle_mem_write();
+		return -EPERM;
+	}
 
 	written = 0;
 
@@ -260,9 +265,13 @@ static int mmap_mem(struct file * file, 
 						 vma->vm_page_prot);
 
 #ifdef CONFIG_GRKERNSEC_KMEM
-	if (gr_handle_mem_mmap(vma->vm_pgoff << PAGE_SHIFT, vma))
-		return -EPERM;
+	if (!grsec_lock || (grsec_lock && grsec_enable_secure_kmem)) {
+#else
+	if (grsec_enable_secure_kmem) {
 #endif
+		if (gr_handle_mem_mmap(vma->vm_pgoff << PAGE_SHIFT, vma))
+			return -EPERM;
+	}
 
 	/* Remap-pfn-range will mark the range VM_IO and VM_RESERVED */
 	if (remap_pfn_range(vma,
@@ -492,9 +501,13 @@ static ssize_t write_kmem(struct file * 
 	char * kbuf; /* k-addr because vwrite() takes vmlist_lock rwlock */
 
 #ifdef CONFIG_GRKERNSEC_KMEM
-	gr_handle_kmem_write();
-	return -EPERM;
+	if (!grsec_lock || (grsec_lock && grsec_enable_secure_kmem)) {
+#else
+	if (grsec_enable_secure_kmem) {
 #endif
+		gr_handle_kmem_write();
+		return -EPERM;
+	}
 
 	if (p < (unsigned long) high_memory) {
 
@@ -802,9 +815,13 @@ static loff_t memory_lseek(struct file *
 static int open_port(struct inode * inode, struct file * filp)
 {
 #ifdef CONFIG_GRKERNSEC_KMEM
-	gr_handle_open_port();
-	return -EPERM;
+	if (!grsec_lock || (grsec_lock && grsec_enable_secure_kmem)) {
+#else
+	if (grsec_enable_secure_kmem) {
 #endif
+		gr_handle_open_port();
+		return -EPERM;
+	}
 
 	return capable(CAP_SYS_RAWIO) ? 0 : -EPERM;
 }
Index: linux-2.6.18/grsecurity/grsec_init.c
===================================================================
--- linux-2.6.18.orig/grsecurity/grsec_init.c
+++ linux-2.6.18/grsecurity/grsec_init.c
@@ -46,6 +46,8 @@ int grsec_enable_socket_client;
 int grsec_socket_client_gid;
 int grsec_enable_socket_server;
 int grsec_socket_server_gid;
+int grsec_enable_secure_io;
+int grsec_enable_secure_kmem;
 int grsec_resource_logging;
 int grsec_lock;
 
@@ -230,6 +232,12 @@ grsecurity_init(void)
 	grsec_enable_socket_server = 1;
 	grsec_socket_server_gid = CONFIG_GRKERNSEC_SOCKET_SERVER_GID;
 #endif
+#ifdef CONFIG_GRKERNSEC_IO
+	grsec_enable_secure_io = 1;
+#endif
+#ifdef CONFIG_GRKERNSEC_KMEM
+	grsec_enable_secure_kmem = 1;
+#endif
 #endif
 
 	return;
Index: linux-2.6.18/grsecurity/grsec_sysctl.c
===================================================================
--- linux-2.6.18.orig/grsecurity/grsec_sysctl.c
+++ linux-2.6.18/grsecurity/grsec_sysctl.c
@@ -36,7 +36,7 @@ GS_CHROOT_SYSCTL, GS_TPE, GS_TPE_GID, GS
 GS_RANDPID, GS_SOCKET_ALL, GS_SOCKET_ALL_GID, GS_SOCKET_CLIENT,
 GS_SOCKET_CLIENT_GID, GS_SOCKET_SERVER, GS_SOCKET_SERVER_GID,
 GS_GROUP, GS_GID, GS_ACHDIR, GS_AMOUNT, GS_AIPC, GS_DMSG,
-GS_TEXTREL, GS_FINDTASK, GS_SHM, GS_LOCK, GS_MODSTOP, GS_RESLOG};
+GS_TEXTREL, GS_FINDTASK, GS_SHM, GS_IO, GS_KMEM, GS_LOCK, GS_MODSTOP, GS_RESLOG};
 
 
 ctl_table grsecurity_table[] = {
@@ -431,6 +431,26 @@ ctl_table grsecurity_table[] = {
 		.proc_handler	= &proc_dointvec,
 	},
 #endif
+#ifdef CONFIG_GRKERNSEC_IO
+	{
+		.ctl_name	= GS_IO,
+		.procname	= "secure_io",
+		.data		= &grsec_enable_secure_io,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
+#ifdef CONFIG_GRKERNSEC_KMEM
+	{
+		.ctl_name	= GS_KMEM,
+		.procname	= "secure_kmem",
+		.data		= &grsec_enable_secure_kmem,
+		.maxlen		= sizeof(int),
+		.mode		= 0600,
+		.proc_handler	= &proc_dointvec,
+	},
+#endif
 	{
 		.ctl_name	= GS_LOCK,
 		.procname	= "grsec_lock",
Index: linux-2.6.18/include/linux/grsecurity.h
===================================================================
--- linux-2.6.18.orig/include/linux/grsecurity.h
+++ linux-2.6.18/include/linux/grsecurity.h
@@ -188,6 +188,8 @@ extern int gr_handle_mem_mmap(const unsi
 extern unsigned long pax_get_random_long(void);
 #define get_random_long() pax_get_random_long()
 
+extern int grsec_enable_secure_io;
+extern int grsec_enable_secure_kmem;
 extern int grsec_enable_dmesg;
 extern int grsec_enable_randsrc;
 extern int grsec_enable_shm;
